# . .\AzureDevOpsContext.ps1

Function Set-GroupAvatar
{
    [CmdletBinding()]
param(
    [ValidateNotNullOrEmpty()]
    [Parameter(Mandatory=$true)][string]$projectName,
    [Parameter(Mandatory=$true)][string]$groupName,
    [Parameter(Mandatory=$true)][string]$filePath,
    [Parameter(Mandatory=$true)][AzureDevOpsContext]$context
)

$contentType = 'application/json'
$v = $context.apiVersion + '-preview.1'

$graphCtx = Get-AzureDevOpsContext -protocol https -coreServer vssps.dev.azure.com -org $context.org -project $context.project -apiVersion $context.apiVersion `
    -pat $context.pat -isOnline
$v = $context.apiVersion + '-preview.1'
$group = Get-Group -projectName $projectName -groupName $groupName -context $context

$avatarUrl = $graphCtx.orgBaseUrl + '/graph/Subjects/' + $group.descriptor + '/avatars?api-version=' + $v
Write-Host $avatarUrl

# $imageData = [Convert]::ToBase64String((Get-Content $filePath -Encoding Byte))
[byte[]]$imageData = Get-Content $filePath -Encoding byte
$timestamp = Get-Date -Format o | ForEach-Object { $_ -replace ":", "." }
$objs = @(
    @{
        isAutoGenerated = $false;
        timeStamp = $timestamp;
        size = 1; # 'small';
        value = $imageData;
    },
    @{
        isAutoGenerated = $false;
        timeStamp = $timestamp;
        size = 2; # 'medium';
        value = $imageData;
    },
    @{
        isAutoGenerated = $false;
        timeStamp = $timestamp;
        size = 3; # 'large';
        value = $imageData;
    }
)
$objs | ForEach-Object {

    $obj = $_
    $data = ConvertTo-Json -InputObject $obj -Depth 10
    if($context.isOnline) {
        Invoke-RestMethod -Headers @{Authorization="Basic $($context.base64AuthInfo)"} -Uri $avatarUrl -Method Put -Body $data -ContentType $contentType
    }
    else {
        Invoke-RestMethod -Uri $avatarUrl -UseDefaultCredentials -Method Put -Body $data -ContentType $contentType
    }
    # Start-Sleep -Milliseconds 1000

}

}